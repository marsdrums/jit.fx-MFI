<jittershader name="randlines">
  <param name="pos" type="vec3" state="POSITION" />
  <param name="tex0" type="int" default="0" />
  <param name="texDim" type="vec2" state="TEXDIM0" />
  <param name="colormode" type="int" default="0" />
  <param name="rotation" type="float" default="6.2831853072" />
  <param name="step" type="float" default="1" />
  <param name="smoothness" type="float" default="0.0" />
  <param name="randomness" type="float" default="0.0" />
  <param name="alpha" type="float" default="1.0" />
  <param name="fade" type="float" default="0.0" />
  <language name="glsl" version="1.5">
    <bind param="pos" program="vp" />
    <bind param="tex0" program="gp" />
    <bind param="texDim" program="vp" />
    <bind param="texDim" program="gp" />
    <bind param="colormode" program="gp" />
    <bind param="rotation" program="gp" />
    <bind param="step" program="gp" />
    <bind param="smoothness" program="gp" />
    <bind param="randomness" program="gp" />
    <bind param="alpha" program="gp" />
    <bind param="fade" program="gp" />
    <program name="vp" type="vertex">
<![CDATA[
#version 330 core
in vec3 pos;

uniform vec2 texDim;

out jit_PerVertex {
  flat vec2 rectPos;  
} jit_out;

void main() { 
  gl_Position = vec4(pos.xy*2 - 1, 0., 1.); 
  jit_out.rectPos = vec2(pos.x, 1 - pos.y) * texDim;

}
]]>
    </program>
    <program name="gp" type="geometry">
<![CDATA[
#version 330 core
#define TWOPI 6.2831853072

layout (points) in;
layout (line_strip, max_vertices=128) out;

in jit_PerVertex {
  flat vec2 rectPos;    
} jit_in[];

out jit_PerVertex {
  flat vec4 color;
};

uniform sampler2DRect tex0;
uniform vec2 texDim;
uniform int colormode;
uniform float rotation;
uniform float step;
uniform float smoothness;
uniform float randomness;
uniform float alpha;
uniform float fade;

//Random functions
uint wang_hash(inout uint seed)
{
    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}
 
float RandomFloat01(inout uint seed)
{
    return float(wang_hash(seed)) / 4294967296.0;
}

uint getRandSeed(vec2 uv, int frame){ 
  return  uint(uv.x*3772) + uint(uv.y*78223) + uint(frame)*uint(26699); 
}

void main() {


  uint seed = getRandSeed(jit_in[0].rectPos, 0);
  vec4 pos = vec4(vec2(RandomFloat01(seed), RandomFloat01(seed))*2 - 1, 0.0, 1.0);

  vec2 uv = (pos.xy*0.5 + 0.5)*texDim;
  float angle = 0.0;//texture(tex0, uv).b*rotation;
  //vec2 dir = texture(tex0, uv).b * step;
  vec2 dir;

  for(int i = 0; i < 127; i++){
    gl_Position = pos;
    color = vec4(vec3(1.0), alpha*mix(1, (1 - float(i)/127), fade));
    EmitVertex(); 

    angle = mix(texture(tex0, (pos.xy*0.5 + 0.5)*texDim).b, angle, smoothness)*rotation;
    angle += (RandomFloat01(seed)-0.5)*randomness;
    dir = vec2(cos(angle), sin(angle));
    pos.xy += dir*step/texDim;

  }

  EndPrimitive(); 

}
]]>
    </program>
    <program name="fp" type="fragment">
<![CDATA[
#version 330 core

in jit_PerVertex {
  flat vec4 color;
} jit_in;

out vec4 color;

void main() {
  color = jit_in.color;
} 
]]>
    </program>
  </language>
</jittershader>
