<jittershader name="jit.fx.sobel">
	<param name="tex0" type="int" default="0" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texMat" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="amt" type="float" default="0.0" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="uv" program="vp" />
		<bind param="texMat" program="vp" />
		<bind param="amt" program="fp" />
		<program name="vp" type="vertex" source="fx.vp.unary.glsl" />

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

layout (location = 0) out vec4 outColor;

uniform samplerJit0 tex0;
uniform float amt;

in jit_PerVertex {
	vec2 uv;
} jit_in;

void make_kernel(inout vec4 n[9])
{

  n[0] = texture(tex0, jit_in.uv + vec2(-1.0, -1.0));
  n[1] = texture(tex0, jit_in.uv + vec2(0.0, -1.0));
  n[2] = texture(tex0, jit_in.uv + vec2(1.0, -1.0));
  n[3] = texture(tex0, jit_in.uv + vec2(-1.0, 0.0));
  n[4] = texture(tex0, jit_in.uv);
  n[5] = texture(tex0, jit_in.uv + vec2(1.0, 0.0));
  n[6] = texture(tex0, jit_in.uv + vec2(-1.0, 1.0));
  n[7] = texture(tex0, jit_in.uv + vec2(0.0, 1.0));
  n[8] = texture(tex0, jit_in.uv + vec2(1.0, 1.0));
}

void main(void) 
{
  vec4 n[9];
  make_kernel(n);

  vec4 sobel_edge_h = n[2] + (2.0*n[5]) + n[8] - (n[0] + (2.0*n[3]) + n[6]);
  vec4 sobel_edge_v = n[0] + (2.0*n[1]) + n[2] - (n[6] + (2.0*n[7]) + n[8]);
  vec4 sobel = sqrt((sobel_edge_h * sobel_edge_h) + (sobel_edge_v * sobel_edge_v));
  sobel.r = sobel.r >= amt ? sobel.r : 0.0;
  sobel.g = sobel.g >= amt ? sobel.g : 0.0;
  sobel.b = sobel.b >= amt ? sobel.b : 0.0;

  outColor = vec4( sobel.rgb, 1.0 );
}

]]>
</program>
</language>
</jittershader>
