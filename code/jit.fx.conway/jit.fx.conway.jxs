<jittershader name="default">
	<description>Default Slab </description>
	<param name="tex0" type="int" default="0" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texMat" type="mat4" state="TEXTURE0_MATRIX" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="uv" program="vp" />
		<bind param="texMat" program="vp" />
		<program name="vp" type="vertex"  source="fx.vp.unary.glsl" />

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

layout (location = 0) out vec4 outColor;

uniform samplerJit0 tex0;

in jit_PerVertex {
	vec2 uv;
} jit_in;

float luma(vec3 x){ return dot(x, vec3(0.299, 0.587, 0.144)); }

float count_neighbors(ivec2 iuv){

	float count = 0;
	count += texelFetch(tex0, iuv + ivec2(-1,-1)).r;
	count += texelFetch(tex0, iuv + ivec2(+0,-1)).r;
	count += texelFetch(tex0, iuv + ivec2(+1,-1)).r;
	count += texelFetch(tex0, iuv + ivec2(-1,+0)).r;
	count += texelFetch(tex0, iuv + ivec2(+1,+0)).r;
	count += texelFetch(tex0, iuv + ivec2(-1,+1)).r;
	count += texelFetch(tex0, iuv + ivec2(+0,+1)).r;
	count += texelFetch(tex0, iuv + ivec2(+1,+1)).r;
	return count;
}

void main(void) {

	ivec2 iuv = ivec2(jit_in.uv);

	float count = count_neighbors(iuv);

	float state = texelFetch(tex0, iuv).r;
	float new_state;

	if(state == 1.0){ //if alive
		new_state = (count == 2 || count == 3) ? 1.0 : 0.0;
	} else { //if dead
		new_state = count == 3 ? 1.0 : 0.0;
	}

	outColor = vec4(new_state, new_state, new_state, 1);
}
]]>
</program>
</language>
</jittershader>
