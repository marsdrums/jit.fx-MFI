<jittershader name="jit.fx.cf.bilateral">
	<param name="tex0" type="int" default="0" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texMat" type="mat4" state="TEXTURE0_MATRIX" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="uv" program="vp" />
		<bind param="texMat" program="vp" />
		<program name="vp" type="vertex" source="fx.vp.unary.glsl" />

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

layout (location = 0) out vec4 outColor;

uniform samplerJit0 tex0;

in jit_PerVertex {
	vec2 uv;
} jit_in;

#define SIGMA 10.0
#define BSIGMA 0.1
#define MSIZE 15

float normpdf(in float x, in float sigma) { return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma; }
float normpdf3(in vec3 v, in float sigma) { return 0.39894*exp(-0.5*dot(v,v)/(sigma*sigma))/sigma; }

void main(void) {

	vec3 c = texture(tex0, jit_in.uv).rgb;

	const int kSize = (MSIZE-1)/2;
	vec3 final_colour = vec3(0.0);
	float Z = 0.0;

	const float kernel[MSIZE] = float[MSIZE]( 	0.031225216, 0.033322271, 0.035206333, 
												0.036826804, 0.038138565, 0.039104044, 
												0.039695028, 0.039894000, 0.039695028, 
												0.039104044, 0.038138565, 0.036826804, 
												0.035206333, 0.033322271, 0.031225216);
	
	vec3 cc;
	float factor;
	float bZ = 1.0/normpdf(0.0, BSIGMA);

	for (int i=-kSize; i <= kSize; ++i){
		for (int j=-kSize; j <= kSize; ++j){

			cc = texture(tex0, jit_in.uv + vec2(float(i),float(j)) ).rgb;
			factor = normpdf3(cc-c, BSIGMA)*bZ*kernel[kSize+j]*kernel[kSize+i];
			Z += factor;
			final_colour += factor*cc;
		}
	}
	
	outColor = vec4(final_colour/Z, 1.0);
}
]]>
</program>
</language>
</jittershader>
