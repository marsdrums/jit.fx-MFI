<jittershader name="jit.fx.an.normalize">
	<param name="tex0" type="int" default="0" />
	<param name="minTex" type="int" default="1" />
	<param name="maxTex" type="int" default="2" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texMat" type="mat4" state="TEXTURE0_MATRIX" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="minTex" program="vp" />
		<bind param="maxTex" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="texMat" program="vp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec2 uv;
uniform sampler2DRect minTex;
uniform sampler2DRect maxTex;
uniform mat4 texMat;

out jit_PerVertex {
	flat vec4 minVal;
	flat vec4 diff;
	smooth vec2 uv;	
} jit_out;

void main(void) {
	gl_Position = vec4(uv*2 - 1, 0, 1);
	jit_out.minVal = texelFetch(minTex, ivec2(0));
	jit_out.diff = texelFetch(maxTex, ivec2(0)) - jit_out.minVal;
	jit_out.uv = vec2(texMat * vec4(uv, 0.0, 1.0));
}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	flat vec4 minVal;
	flat vec4 diff;
	smooth vec2 uv;	
} jit_in;

layout (location = 0) out vec4 outColor;

uniform sampler2DRect tex0;

void main(void) {

	outColor = (texelFetch(tex0, ivec2(jit_in.uv)) - jit_in.minVal) / jit_in.diff;

}
]]>
</program>
</language>
</jittershader>
