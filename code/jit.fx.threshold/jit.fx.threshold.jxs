<jittershader name="default">
	<description>Default Slab </description>
	<param name="tex0" type="int" default="0" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texMat" type="mat4" state="TEXTURE0_MATRIX" />
  <param name="amt" type="float" default="0.5" />
  <param name="smoothness" type="float" default="0.0" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="uv" program="vp" />
		<bind param="texMat" program="vp" />
    <bind param="amt" program="fp" />
    <bind param="smoothness" program="fp" />
		<program name="vp" type="vertex"  source="fx.vp.unary.glsl" />

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

layout (location = 0) out vec4 outColor;

uniform samplerJit0 tex0, tex1;
uniform float amt, smoothness;

in jit_PerVertex {
	vec2 uv;
} jit_in;

/*
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 */
float rgb2hue(vec3 col) {
  
  float _max = max(max(col.r,col.g),col.b);
  float _min = min(min(col.r,col.g),col.b);
  
  float hue = (_max + _min) / 2;

  if (_max == _min) {
    hue = 0; // achromatic
  }
  else {
    float d = _max - _min;
    
    if (_max == col.r) {
      hue = (col.g - col.b) / d + (col.g < col.b ? 6 : 0);
    }
    else if (_max == col.g) {
      hue = (col.b - col.r) / d + 2;
    }
    else if (_max == col.b) {
      hue = (col.r - col.g) / d + 4;
    }
    
    hue /= 6;
  }

  return hue;
  
}

void main(void) {

	vec3 a = texelFetch(tex0, ivec2(jit_in.uv)).rgb;

	float s = max(0.000001, smoothness);
	float lo = amt - s*0.5;
	float hi = amt + s*0.5;

	vec3 mask = clamp(a, vec3(lo), vec3(hi)) - lo;
	mask /= s;
	mask.r = smoothstep(0,1,mask.r);
	mask.g = smoothstep(0,1,mask.g);
	mask.b = smoothstep(0,1,mask.b);

	outColor = vec4(a * mask, 1);

}
]]>
</program>
</language>
</jittershader>
