<jittershader name="default">
	<description>Default Slab </description>
	<param name="tex0" type="int" default="0" />
	<param name="texMat" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="off" type="int" default="0" />
	<param name="texDim" type="vec2" state="TEXDIM0" />
	<param name="dimmode" type="int" default="0" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="texMat" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="off" program="fp" />
		<bind param="texDim" program="fp" />
		<bind param="dimmode" program="fp" />
		<program name="vp" type="vertex"  source="fx.vp.unary.glsl" />

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;
} jit_in;
layout (location = 0) out vec4 outColor;

uniform samplerJit0 tex0;
uniform int off, dimmode;
uniform vec2 texDim;
float color_sum(vec4 c){
	return c.r + c.g + c.b + c.a;
}

void main(void) {

    int i = int(jit_in.uv[dimmode]);
    int j = i + ((i&1)==(off&1) ?-1:1); 
                
    vec4 N = 		texelFetch(tex0, (dimmode == 0 ? ivec2(j, jit_in.uv.y) : ivec2(jit_in.uv.x, j)));
         outColor = texelFetch(tex0, (dimmode == 0 ? ivec2(i, jit_in.uv.y) : ivec2(jit_in.uv.x, i)));
    if(  (color_sum(N) < color_sum(outColor) )!=(i>j) && min(j,i)>=0 && max(j,i)<int(texDim[dimmode]) ) outColor=N;
        

}
]]>
</program>
</language>
</jittershader>
