<jittershader name="default">
	<description>Default Slab </description>
	<param name="tex0" type="int" default="0" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />
	<param name="off" type="int" default="0" />
	<param name="texDim" type="vec2" state="TEXDIM0" />
	<param name="sinAngle" type="float" default="0.0" />
	<param name="cosAngle" type="float" default="1.0" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="textureMatrix0" program="fp" />
		<bind param="texcoord" program="vp" />
		<bind param="off" program="fp" />
		<bind param="texDim" program="fp" />
		<bind param="sinAngle" program="fp" />
		<bind param="cosAngle" program="fp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec2 texcoord;
out jit_PerVertex {
	vec2 texcoord;
} jit_out;

void main(void) {
	gl_Position = vec4(texcoord*2 - 1, 0., 1.);
	jit_out.texcoord = texcoord-0.5;

}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 texcoord;
} jit_in;
layout (location = 0) out vec4 outColor;

uniform samplerJit0 tex0;
uniform mat4 textureMatrix0;
uniform float sinAngle, cosAngle;

vec2 rotateUV() {
    return mat2(cosAngle, -sinAngle, sinAngle, cosAngle) * jit_in.texcoord + 0.5;
}

void main(void) {

	vec2 uv = vec2(textureMatrix0*vec4(rotateUV(),0,1));
	outColor = texture(tex0, uv);
        
}
]]>
</program>
</language>
</jittershader>
